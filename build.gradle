buildscript {
	ext {
		springBootVersion = '2.1.5.RELEASE'
	}
	repositories {
	    mavenCentral()
	    gradlePluginPortal()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2"
		classpath 'com.bmuschko:gradle-docker-plugin:4.9.0'
	}
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.bmuschko.docker-spring-boot-application'

group = 'com.jiriki.bbp'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile group: 'com.github.ulisesbocchio', name: 'jasypt-spring-boot-starter', version: '2.1.0'
    compile 'com.google.api-client:google-api-client:1.23.0'
    compile 'com.google.oauth-client:google-oauth-client-jetty:1.23.0'
    compile 'com.google.apis:google-api-services-sheets:v4-rev516-1.23.0'
    compile 'org.hibernate:hibernate-core:5.2.17.Final'
	compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'
	compile('com.h2database:h2:1.4.191');
	annotationProcessor("org.projectlombok:lombok")
	compileOnly 'org.projectlombok:lombok:1.18.8'
	runtime('org.springframework.boot:spring-boot-devtools')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompileOnly 'org.projectlombok:lombok:1.18.8'
	testAnnotationProcessor("org.projectlombok:lombok")
}

jar {
    baseName = 'jiriki'
    archiveName = "${baseName}.jar"
}


jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

bootRun {
  if (project.hasProperty('args')) {
    args project.args.split('\\s+')
  }
}

docker {
  springBootApplication {
        baseImage = 'openjdk:8-alpine'
        ports = [9090, 8080]
        tag = 'bbp10-jiriki.cf/bbp-jiriki-backend:${jar.version}'
        def jasyptPass = 'secret'
        if (project.hasProperty('jasypt')) {
          jasyptPass = project.property('jasypt')
        }
        jvmArgs = ['-Dspring.profiles.active=production', '-Xmx2048m', "-Djava.security.egd=file:/dev/./urandom", "-Djasypt.encryptor.password=" + jasyptPass]
  }
  registryCredentials {
    url = 'bbp10-jiriki.cf'
    username = project.hasProperty('dockerusername') ? project.property('dockerusername') : ''
    password = project.hasProperty('dockerpassword') ? project.property('dockerpassword') : ''
  }
}

// import com.bmuschko.gradle.docker.tasks.image.Dockerfile

// task createDockerfile(type: Dockerfile) {
//     destFile = project.file('build/docker/Dockerfile')
//     from 'openjdk:8-jre-alpine'
//     copyFile jar.archiveName, '/app/jiriki.jar'
//     entryPoint 'java'
//     defaultCommand '-jar', '/app/jiriki.jar', '-Dspring.profiles.active=production', "-Djava.security.egd=file:/dev/./urandom", "-Djasypt.encryptor.password=" + project.hasProperty('jasypt') ? project.property('jasypt') : 'secret'
//     exposePort 8080
//     runCommand 'apk --update --no-cache add curl'
//     instruction 'HEALTHCHECK CMD curl -f http://localhost:8080/health || exit 1'
// }

// import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

// task buildImage(type: DockerBuildImage) {
//     dependsOn createDockerfile
//     tags.add("bbp10-jiriki.cf/bbp-jiriki-backend:$jar.version")
// }

// import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

// task pushImage(type: DockerPushImage) {
//     dependsOn buildImage
//     conventionMapping.imageName = { buildImage.getTag() }
// }